!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){console.log("JAMES");var n=function(){var e=this;this.segments=[],this.moving=!1,this.orientation="right",this.dx=10,this.dy=0,this.createBabySnake=function(){e.segments.push([30,10]),e.segments.push([20,10]),e.segments.push([10,10])},this.move=function(){var t=e.segments[0];"right"===e.orientation&&(t[0]+=e.dx),e.segments.unshift(t),e.segments=e.segments.slice(0,-1),console.log("HERE",e.segments)},this.changeOrientation=function(){},this.checkCollision=function(){},this.growSnake=function(){}},o=function(){s.move(),console.log("LEN",s.segments.length)};document.body.onkeyup=function(e){(console.log("STARTING GAME"),"Space"===e.code)&&(document.querySelector(".title-screen").style.display="none",document.querySelector(".game-container").style.display="block",s.moving=!0,setInterval(o,1e3))};var r,i,s=new n;s.createBabySnake(),r=s.segments,i=document.querySelector(".game-container"),r.forEach((function(e){var t=document.createElement("div");t.classList.add("snake-segment"),t.style.left=e[0]+"px",t.style.top=e[1]+"px",i.appendChild(t)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,