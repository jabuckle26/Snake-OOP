!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o=function(){var e=this;this.segments=[],this.moving=!1,this.orientation="horizontal",this.dx=10,this.dy=0,this.justEaten=!1,this.createBabySnake=function(){e.segments.push([30,10]),e.segments.push([20,10]),e.segments.push([10,10]),e.moving=!0},this.move=function(){var t=e.segments[0].map((function(e){return e}));e.justEaten?("horizontal"===e.orientation?e.segments[0][0]+=e.dx:"vertical"===e.orientation&&(e.segments[0][1]+=e.dy),e.justEaten=!1):("horizontal"===e.orientation?t[0]+=e.dx:"vertical"===e.orientation&&(t[1]+=e.dy),e.segments.unshift(t),e.segments=e.segments.slice(0,-1))},this.checkCollision=function(){var t=e.segments[0];t[0]<-10||t[0]>490||t[1]>490||t[1]<-10?e.moving=!1:e.internalCheck(t[0],t[1])&&(e.moving=!1)},this.internalCheck=function(t,n){var o=!1;return e.segments.slice(1,e.segments.length).forEach((function(e){e[0]===t&&e[1]===n&&(o=!0)})),o},this.changeOrientation=function(t){switch(t.code){case"ArrowRight":0===e.dx&&(e.dx=10,e.dy=0,e.orientation="horizontal");break;case"ArrowLeft":0===e.dx&&(e.dx=-10,e.dy=0,e.orientation="horizontal");break;case"ArrowDown":0===e.dy&&(e.dx=0,e.dy=10,e.orientation="vertical");break;case"ArrowUp":0===e.dy&&(e.dx=0,e.dy=-10,e.orientation="vertical")}},this.growSnake=function(){console.log("GROW"),e.justEaten=!0;var t=e.segments[0].map((function(e){return e}));e.segments.splice(1,0,t)}},r=function(){var e=this;this.max=Math.floor(480),this.min=Math.ceil(20),this.multiplier=this.max-this.min+1,this.x=10*Math.round(Math.random()*this.multiplier/10),this.y=10*Math.round(Math.random()*this.multiplier/10),this.createNewFood=function(){e.x=10*Math.round(Math.random()*e.multiplier/10),e.y=10*Math.round(Math.random()*e.multiplier/10)}},i=function(){document.addEventListener("keyup",d.changeOrientation),d.move(),s(),a(d.segments),d.checkCollision(),d.segments[0][0]===m.x&&d.segments[0][1]===m.y&&(d.growSnake(),m.createNewFood(),c(m.x,m.y)),!1===d.moving&&u(),console.log(d.segments.length)},a=function(e){var t=document.querySelector(".game-container");e.forEach((function(e){var n=document.createElement("div");n.classList.add("snake-segment"),n.style.left=e[0]+"px",n.style.top=e[1]+"px",t.appendChild(n)}))},s=function(){var e=document.querySelectorAll(".snake-segment");Array.from(e).forEach((function(e){e.remove()}))},c=function(e,t){var n=document.querySelector(".game-container");if(null===document.querySelector(".food")){var o=document.createElement("div");o.classList.add("food"),o.style.left=e+"px",o.style.top=t+"px",n.appendChild(o)}else{var r=document.querySelector(".food");r.style.left=e+"px",r.style.top=t+"px"}},u=function(){console.log("GAME OVER!"),(d=new o).createBabySnake(),s(),a(d.segments)};document.body.onkeyup=function(e){"Space"===e.code&&(d.createBabySnake(),a(d.segments),c(m.x,m.y),document.querySelector(".title-screen").style.display="none",document.querySelector(".game-container").style.display="block",d.moving=!0,setInterval(i,l))};var l=100,d=new o,m=new r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,